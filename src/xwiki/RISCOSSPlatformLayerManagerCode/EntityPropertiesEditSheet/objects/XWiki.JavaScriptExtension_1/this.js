XWikiObj(function (obj) {
    obj.setCache("long");
    obj.setCode("var XWiki = (function (XWiki) {\n// Start XWiki augmentation.\n/**\n * Displays the title (tool tip) inside the text input when there's no value and the text input is not focused.\n */\nXWiki.InputWithTitle = Class.create({\n  initialize : function(input) {\n    this.input = input;\n    this.input.observe('focus', this._onFocus.bindAsEventListener(this));\n    this.input.observe('blur', this._onBlur.bind(this));\n\n    // We have to listen to the save event because 'Save & Continue' doesn't trigger a form submit event.\n    document.observe('xwiki:class:save', this._onSave.bind(this));\n\n    this._onBlur();\n  },\n  _onFocus : function(event) {\n    if (this.input.hasClassName('unset')) {\n      this.input.value = '';\n      this.input.removeClassName('unset');\n    }\n  },\n  _onBlur : function() {\n    if (this.input.value == '') {\n      this.input.addClassName('unset');\n      this.input.value = this.input.title;\n    }\n  },\n  _onSave : function() {\n    this._onFocus();\n    this._onBlur.bind(this).defer();\n  }\n});\n\n/**\n * A text input that is automatically resized to fit its value.\n */\nXWiki.AutoResizeInput = Class.create({\n  initialize : function(input) {\n    this.input = input;\n    var resizeEvents = ['blur', 'change', 'cut', 'keyup', 'paste'];\n    for(var i = 0; i < resizeEvents.length; i++) {\n      this.input.observe(resizeEvents[i], this._resize.bindAsEventListener(this));\n    }\n    this.input.observe('keypress', this._reserveSpace.bindAsEventListener(this));\n\n    this.meter = new Element('pre', {'class': 'autoResize-meter inherit'});\n    this.meter.appendChild(document.createTextNode(''));\n    this.input.addClassName('inherit').insert({after: this.meter});\n\n    this._resize();\n  },\n  _resize : function(event) {\n    if (event) {\n      this._resize.bind(this).defer();\n    } else {\n      // Make sure the meter text is not set to the empty string because otherwise the meter offset width is wrongly\n      // computed in Chrome. See http://code.google.com/p/chromium/issues/detail?id=105573 .\n      this.meter.firstChild.data = this.input.value || ' ';\n      this.input.setStyle({width: (this.meter.offsetWidth + 6) + 'px'});\n    }\n  },\n  _reserveSpace : function(event) {\n    /* Ignore: Backspace, Delete, End, Home, Left, Up, Right, Down. */\n    var ignored = [8, 46, 35, 36, 37, 38, 39, 40];\n    for(var i = 0; i < ignored.length; i++) {\n      if (event.keyCode == ignored[i]) {\n        return;\n      }\n    }\n    this.input.setStyle({width: (this.input.offsetWidth + 6) + 'px'});\n  }\n});\n\n/**\n * A toggle button backed by a select with two options.\n */\nXWiki.ToggleSelect = Class.create({\n  initialize : function(select) {\n    this.select = select;\n    this.select.hide();\n\n    this.off = select.options[0];\n    this.on = select.options[1];\n\n    this.switcher = new Element('span', {'class': this.select.className, title: this.select.title});\n    this.switcher.removeClassName('toggle').addClassName('toggle-switcher');\n    this.switcher.appendChild(document.createTextNode(''));\n    this.switcher.observe('click', this._toggle.bind(this));\n    this.select.insert({after: this.switcher});\n\n    this._update();\n  },\n  _toggle : function() {\n    if (this.on.selected) {\n      this.off.selected = true;\n    } else {\n      this.on.selected = true;\n    }\n    this._update();\n  },\n  _update : function() {\n    this.switcher.firstChild.nodeValue = this.select.options[this.select.selectedIndex].text;\n  }\n});\n\n// Allow widgets to catch the save event before the form is submitted when the 'Save & Continue' button is clicked. We\n// need this hack because the 'Save & Continue' handler from actionbuttons.js is added right after the page is loaded,\n// before any other code can register its own listener.\ndocument.observe('xwiki:actions:save', function(event) {\n  document.fire('xwiki:class:save', {originalEvent: event});\n}.bindAsEventListener(window));\n// End XWiki augmentation.\nreturn XWiki;\n}(XWiki || {}));");
    obj.setName("Widgets");
    obj.setParse("0");
    obj.setUse("onDemand");
});
