XWikiObj(function (obj) {
    obj.setCache("long");
    obj.setCode("var XWiki = (function (XWiki) {\n// Start XWiki augmentation.\n/**\n * Handles the form field display (through AJAX), configure (toggle) and delete.\n */\nXWiki.FormField = Class.create({\n  initialize : function(container) {\n    this.container = container;\n  },\n  enhance : function(data) {\n    this.container.insert({top: this._createToolBox()});\n    if (data) {\n      this.container.addClassName('loading');\n      new Ajax.Request(data, {\n        method: 'get',\n        onSuccess: this._display.bind(this)\n      });\n    } else {\n      this._display(null);\n    }\n  },\n  getContainer : function() {\n    return this.container;\n  },\n  getViewer : function() {\n    return this.container.down('.field-viewer')\n  },\n  getConfig : function() {\n    return this.container.down('.field-config');\n  },\n  getToolBox : function() {\n    return this.container.down('.toolBox');\n  },\n  getName : function() {\n    if (!this.container._typeInput) {\n      // Field type should be stored in the first hidden input under the field container.\n      this.container._typeInput = this.container.down('input[type=hidden]');\n    }\n    return this.container._typeInput.name.substring('type-'.length);\n  },\n  getPropertyId : function(propertyName) {\n    return 'field-' + this.getName() + '_' + propertyName;\n  },\n  _display : function(response) {\n    // If the field container is still attached, update its content.\n    if (this.container.parentNode) {\n      if (response) {\n        this.container.removeClassName('loading');\n        this._injectHTML(response.responseText);\n      }\n\n      this.getToolBox().insert({top: this._createConfigIcon()});\n      this._onConfigure();\n\n      document.fire('xwiki:class:displayField', {field: this, 'new': !!response});\n\n      this._twoColumnConfigDisplay();\n    }\n  },\n  _injectHTML : function(html) {\n    // We don't use Element#update() because it doesn't move external scripts and sheets into HEAD and also because we\n    // don't want to support in-line scripts in displayers.\n    var container = new Element('div');\n    container.innerHTML = html;\n    var head = document.body.previous('head');\n    container.select('link').each(function(link) {\n      head.insert(link);\n    });\n    container.select('script').each(function(script) {\n      if (script.src) {\n        head.insert(new Element('script', {type: script.type, src: script.readAttribute('src')}));\n      }\n      script.remove();\n    });\n    this.container.insert(container);\n  },\n  _createToolBox : function() {\n    var deleteIcon = new Element('img', {\n      src: '$xwiki.getAttachmentURL('AppWithinMinutes.ClassEditSheet', 'bulletcross.png')',\n      alt: '$escapetool.javascript($services.localization.render('platform.appwithinminutes.classEditorDeleteFieldLabel'))',\n      title: '$escapetool.javascript($services.localization.render('platform.appwithinminutes.classEditorDeleteFieldLabel'))'\n    });\n    deleteIcon.observe('click', this._onDelete.bindAsEventListener(this));\n\n    var toolBox = new Element('div', {'class': 'toolBox'});\n    toolBox.insert(deleteIcon);\n    return toolBox;\n  },\n  _createConfigIcon : function() {\n    return new Element('img').observe('click', this._onConfigure.bindAsEventListener(this));\n  },\n  _onConfigure : function(event) {\n    var icon = event ? event.element() : this.getToolBox().down('img');\n    var fieldConfig = this.getConfig();\n    if (fieldConfig.visible()) {\n      fieldConfig.hide();\n      icon.alt = icon.title = '$escapetool.javascript($services.localization.render('platform.appwithinminutes.classEditorConfigureFieldLabel'))';\n      icon.src = '$xwiki.getSkinFile('icons/silk/bullet_wrench.png')';\n      this._maybePreview();\n    } else {\n      fieldConfig.show();\n      icon.alt = '$escapetool.javascript($services.localization.render('platform.appwithinminutes.classEditorPreviewFieldLabel'))';\n      icon.title = '$escapetool.javascript($services.localization.render('platform.appwithinminutes.classEditorPreviewFieldHint'))';\n      icon.src = '$xwiki.getAttachmentURL('AppWithinMinutes.ClassEditSheet', 'bullettick.png')';\n      this._maybeSavePreviewData();\n    }\n  },\n  _onDelete : function(event) {\n    new XWiki.widgets.ConfirmationBox({\n      onYes : this._onConfirmedDelete.bind(this)\n    }, {\n      confirmationText : '$services.localization.render('core.editors.class.deleteProperty.confirm')'\n    });\n  },\n  _onConfirmedDelete : function() {\n    this.container.remove();\n    document.fire('xwiki:class:deleteField', {field: this});\n  },\n  _maybeSavePreviewData : function() {\n    // Initialize the preview data.\n    this.previewData || this._savePreviewData();\n    // Make sure the preview data is updated when the field is renamed.\n    if (!this._renameListener) {\n      this._renameListener = function(event) {\n        if (event.memo.field.getContainer() == this.container) {\n          this._savePreviewData();\n        }\n      }.bindAsEventListener(this);\n      document.observe('xwiki:class:renameField', this._renameListener);\n    }\n  },\n  _savePreviewData : function() {\n    this.previewData = this._asHash();\n    // Ignore properties that don't affect the preview.\n    ['name', 'prettyName', 'hint', 'required', 'number'].each(function(propertyName) {\n      this.previewData.unset(this.getPropertyId(propertyName));\n    }.bind(this));\n    // Add parameters required by the AJAX preview request.\n    this.previewData.set('preview', true);\n    this.previewData.set('xpage', 'plain');\n  },\n  _maybePreview : function() {\n    if(!this.previewData) {\n      return;\n    }\n    // Check if there are configuration changes.\n    var data = new Hash();\n    var areEqual = function(alice, bob) {\n      if (typeof alice == typeof bob) {\n        if (alice.join) {\n          return alice.join() == bob.join();\n        }\n        return alice == bob;\n      }\n      return false;\n    }\n    this._asHash().each(function(pair) {\n      var oldValue = this.previewData.get(pair.key);\n      if (oldValue != undefined && !areEqual(pair.value, oldValue)) {\n        data.set(pair.key, pair.value);\n      }\n    }.bind(this));\n    var modifiedKeys = data.keys();\n    if (modifiedKeys.length > 1 || (modifiedKeys.length == 1 && !modifiedKeys[0].endsWith('_0_' + this.getName()))) {\n      this._preview(this.previewData.clone().update(data));\n    }\n  },\n  _preview : function(data) {\n    var preview = this.getViewer().down('dd');\n    if (preview) {\n      preview.addClassName('loading');\n      // Firefox 3.6 doesn't resolve the empty string to the current page URL so we have to explicitly specify it.\n      new Ajax.Request(window.location.href, {\n        parameters: data.toQueryString(),\n        onSuccess: function(response) {\n          preview.removeClassName('loading');\n          preview.update(response.responseText);\n          this.previewData = data;\n          document.fire('xwiki:class:previewField', {field: this});\n          document.fire('xwiki:dom:updated', {elements: [preview]});\n        }.bind(this)\n      });\n    }\n  },\n  _asHash : function() {\n    // Simulate a submit so that we collect the right values.\n    document.fire('xwiki:class:save', {originalEvent: {memo: {}}});\n    var inputs = this.container.select('input', 'textarea', 'select');\n    return new Hash(Form.serializeElements(inputs, {hash: true}));\n  },\n  _twoColumnConfigDisplay : function() {\n    var leftColumn = this.getConfig();\n    var fieldConfig = new Element('div', {'class': leftColumn.className});\n    leftColumn.insert({before: fieldConfig});\n    fieldConfig.insert(leftColumn);\n    fieldConfig.hide();\n    leftColumn.className = 'leftColumn';\n    leftColumn.show();\n    var rightColumn = new Element('dl', {'class': 'rightColumn'});\n    fieldConfig.insert(rightColumn);\n\n    var visibleDTs = [];\n    leftColumn.select('dt').each(function(dt) {\n      if(dt.visible()) {\n        visibleDTs.push(dt);\n      }\n    });\n\n    var half = Math.ceil(visibleDTs.length / 2);\n    for(var i = half; i < visibleDTs.length; i++) {\n      var dt = visibleDTs[i];\n      var dd = dt.next();\n      rightColumn.insert(dt);\n      if (dd && dd.tagName.toLowerCase() == 'dd') {\n        rightColumn.insert(dd);\n      }\n    }\n\n    fieldConfig.insert(new Element('div', {'style': 'clear: left'}));\n  }\n});\n\n/**\n * Manages the form field names. Generates unique names for newly added fields and renames field configuration property ids/names when a field is renamed.\n */\nXWiki.FormFieldNameManager = Class.create({\n  initialize : function() {\n    // Generate a unique field name when a new field is dragged from the palette to the form canvas.\n    document.observe('xwiki:class:displayField', this._maybeGenerateFieldName.bind(this));\n    // Rename the field configuration property ids/names when a field is renamed. This is needed for AJAX Save & Continue.\n    document.observe('xwiki:document:saved', this._maybeRenameFields.bind(this));\n  },\n  _maybeGenerateFieldName : function(event) {\n    if (!event.memo['new']) {\n      return;\n    }\n    var field = event.memo.field;\n    var nameInput = $(field.getPropertyId('name'));\n    var counter = 1;\n    // We check the type meta property because there can be unsupported field types for which we know only their type.\n    while($('type-' + nameInput.value + counter++));\n    nameInput.value = nameInput.value + (counter - 1);\n    this._maybeRenameField(field);\n  },\n  _maybeRenameFields : function() {\n    $('fields').childElements().each(function(item) {\n      this._maybeRenameField(new XWiki.FormField(item));\n    }.bind(this));\n  },\n  _maybeRenameField : function(field) {\n    var oldName = field.getName();\n    var newName = $(field.getPropertyId('name')).value;\n    if (oldName != newName) {\n      this._maybeRenameElement(oldName, newName, field.getContainer());\n      field.getContainer().descendants().each(this._maybeRenameElement.bind(this, oldName, newName));\n      document.fire('xwiki:class:renameField', {field: field});\n    }\n  },\n  _maybeRenameElement : function(oldName, newName, element) {\n    ['id', 'name', 'for'].each(function(attribute) {\n      var value = element.readAttribute(attribute) || '';\n      if (value.startsWith('xwiki-form-' + oldName)) {\n        // This is for fields with multiple values (e.g. radio buttons).\n        value = 'xwiki-form-' + newName + value.substring(11 + oldName.length);\n      } else if (value.endsWith('_0_' + oldName)) {\n        // This is for field default value.\n        value = value.substring(0, value.length - oldName.length) + newName;\n      } else {\n        // This is for field meta properties.\n        var nameIndex = value.indexOf('-') + 1;\n        if (nameIndex > 0 && (value.substring(nameIndex) == oldName || value.substring(nameIndex).startsWith(oldName + '_'))) {\n          value = value.substring(0, nameIndex) + newName + value.substring(nameIndex + oldName.length);\n        }\n      }\n      if (value != '') {\n        element.writeAttribute(attribute, value);\n      }\n    });\n  }\n});\n\n/**\n * Enhances the way the field pretty name is edited. Allows users to edit the pretty name in-place inside the field preview.\n */\nXWiki.FormFieldPrettyNameManager = Class.create({\n  initialize : function() {\n    document.observe('xwiki:class:displayField', this._onDisplayField.bindAsEventListener(this));\n  },\n  _onDisplayField : function(event) {\n    var field = event.memo.field;\n    var prettyNameInput = $(field.getPropertyId('prettyName'));\n    // Hide the DD containing the pretty name input.\n    var parentDD = prettyNameInput.up('dd');\n    parentDD.hide();\n    // Hide the DT containing the pretty name input label.\n    var previousDT = parentDD.previous('dt');\n    previousDT.hide();\n    // Use the label text as tool tip for the pretty name input, if the title attribute is not specified.\n    if (!prettyNameInput.title) {\n      var label = previousDT.down('label');\n      prettyNameInput.title = label.textContent || label.innerText;\n    }\n    // Replace the preview label with the pretty name input.\n    var previewLabel = field.getViewer().down('label');\n    previewLabel.writeAttribute('for', '');\n    previewLabel.removeChild(previewLabel.lastChild);\n    previewLabel.insert(prettyNameInput);\n    // Enhance the pretty name input.\n    new XWiki.InputWithTitle(prettyNameInput);\n    new XWiki.AutoResizeInput(prettyNameInput);\n  }\n});\n\n/**\n * Adds a tool tip to the default value input.\n */\nXWiki.FormFieldDefaultValueManager = Class.create({\n  initialize : function() {\n    var enhanceFieldDefaultValue = this._enhanceFieldDefaultValue.bindAsEventListener(this);\n    document.observe('xwiki:class:displayField', enhanceFieldDefaultValue);\n    document.observe('xwiki:class:previewField', enhanceFieldDefaultValue);\n\n    // We need to listen to save event to rename the default value inputs to match the new field name.\n    document.observe('xwiki:class:save', this._onSave.bind(this));\n  },\n  _enhanceFieldDefaultValue : function(event) {\n    var field = event.memo.field;\n    var fieldName = field.getName();\n    field.getViewer().select('input[type=text]', 'textarea').each(function(input) {\n      if (!input.title && input.name.endsWith('_0_' + fieldName)) {\n        input.title = '$escapetool.javascript($services.localization.render('platform.appwithinminutes.classEditorFieldDefaultValueToolTip'))';\n      }\n    });\n  },\n  _onSave : function() {\n    $('fields').childElements().each(function(item) {\n      this._maybeRenameDefaultValue(new XWiki.FormField(item));\n    }.bind(this));\n  },\n  _maybeRenameDefaultValue : function(field) {\n    var oldName = field.getName();\n    var newName = $(field.getPropertyId('name')).value;\n    if(oldName != newName) {\n      field.getViewer().select('input', 'textarea', 'select').each(function(element) {\n        if (element.name.endsWith('_0_' + oldName)) {\n          element.name = element.name.substring(0, element.name.length - oldName.length) + newName;\n        }\n      });\n    }\n  }\n});\n\n/**\n * Makes the hint editable in place.\n */\nXWiki.FormFieldHintManager = Class.create({\n  initialize : function() {\n    document.observe('xwiki:class:displayField', this._onDisplayField.bindAsEventListener(this));\n  },\n  _onDisplayField : function(event) {\n    var field = event.memo.field;\n    var hintInput = $(field.getPropertyId('hint'));\n    // TODO: Remove this test after the 'hint' meta property is added to the platform.\n    if (hintInput) {\n      hintInput.addClassName('xHint');\n      if (!hintInput.title) {\n        hintInput.title = 'Hint';\n      }\n      // Move the hint input below the pretty name input, in the field viewer.\n      field.getViewer().down('label').insert({after: hintInput});\n      // Enhance the hint input.\n      new XWiki.InputWithTitle(hintInput);\n      new XWiki.AutoResizeInput(hintInput);\n    }\n  }\n});\n\n/**\n * Replaces the input of the \"required\" field property with a toggle button.\n */\nXWiki.FormFieldRequiredManager = Class.create({\n  initialize : function() {\n    document.observe('xwiki:class:displayField', this._onDisplayField.bindAsEventListener(this));\n  },\n  _onDisplayField : function(event) {\n    var field = event.memo.field;\n    var requiredInput = $(field.getPropertyId('required'));\n    // TODO: Remove this test after the 'required' meta property is added to the platform.\n    if (requiredInput) {\n      var prettyNameLabel = field.getViewer().down('label');\n      var wrapper = new Element('div', {'class': 'labelLine'});\n      prettyNameLabel.insert({before: wrapper});\n      wrapper.insert(prettyNameLabel);\n      wrapper.insert('<label><select class=\"xRequired\" title=\"Click to toggle between (Optional) and (Required)\"><option>(Optional)</option><option>(Required)</option></select></label>');\n      new XWiki.ToggleSelect(prettyNameLabel.next().down('select'));\n    }\n  }\n});\n\n/**\n * Manages the sortable list of form fields. Accepts fields dragged from the field palette.\n */\nXWiki.FormCanvas = Class.create({\n  initialize : function(container) {\n    this.container = $(container);\n    Droppables.add(this.container, {accept: 'field', hoverclass: 'hovered', onDrop: this._onDrop.bind(this)});\n\n    document.observe('xwiki:class:deleteField', this._onDeleteField.bind(this));\n    document.observe('xwiki:class:displayField', this._onDisplayField.bindAsEventListener(this));\n\n    this.fields = this.container.down('ul');\n    if (!this.fields) {\n      this.fields = new Element('ul');\n      this.container.insert(this.fields);\n    }\n    this.fields.id = 'fields';\n    if (this.fields.empty()) {\n      this.container.addClassName('empty');\n    } else {\n      this._enhanceFields();\n    }\n  },\n  _enhanceFields : function() {\n    this.fields.childElements().each(function(item) {\n      new XWiki.FormField(item).enhance();\n    });\n  },\n  _onDrop : function(field) {\n    var fieldContainer = new Element('li');\n    this.fields.insert(fieldContainer);\n    this.container.removeClassName('empty');\n    new XWiki.FormField(fieldContainer).enhance(field.down('.data').value);\n  },\n  _onDeleteField : function() {\n    if (this.fields.empty()) {\n      this.container.addClassName('empty');\n    } else {\n      this._updateOrder();\n    }\n  },\n  _onDisplayField : function(event) {\n    var field = event.memo.field;\n\n    // We have to set the ID of the field container as otherwise Sortable.onUpdate() isn't triggered.\n    field.getContainer().id = 'field-' + field.getName();\n\n    // Hide the property number, as ordering can be done by drag and drop\n    var numberInput = $(field.getPropertyId('number'));\n    numberInput.up().hide();\n    numberInput.up().previous().hide();\n\n    // Create and insert the move icon.\n    var moveIcon = new Element('img', {\n      src: '$xwiki.getAttachmentURL('AppWithinMinutes.ClassEditSheet', 'arrow-move.png')',\n      alt: '$escapetool.javascript($services.localization.render('platform.appwithinminutes.classEditorMoveFieldLabel'))',\n      title: '$escapetool.javascript($services.localization.render('platform.appwithinminutes.classEditorMoveFieldHint'))',\n      'class': 'icon-move'\n    });\n    field.getToolBox().insert({bottom: moveIcon});\n\n    Sortable.create('fields', {\n      handle: 'icon-move',\n      format: /^[^_\\-](?:[A-Za-z0-9\\-\\_]*)[\\-](.*)$/,\n      onUpdate : this._updateOrder.bind(this)\n    });\n\n    if (event.memo['new']) {\n      this._updateOrder();\n    }\n  },\n  _updateOrder : function() {\n    var items = this.fields.childElements();\n    for(var i = 0; i < items.length; i++) {\n      var field = new XWiki.FormField(items[i]);\n      if (field.getConfig()) {\n        $(field.getPropertyId('number')).value = i + 1;\n      } else {\n        // Stop updating the order. This method will be called again when the field will be loaded.\n        break;\n      }\n    }\n  }\n});\n\n/**\n * Manages the palette of form fields.\n */\nXWiki.FormFieldPalette = Class.create({\n  initialize : function(container) {\n    $(container).select('.field').each(function(field) {\n      new Draggable(field, {\n        revert: true,\n        reverteffect: function(field) {\n          // Reset the in-line style.\n          field.setStyle({\n            height: '',\n            left: '',\n            position: '',\n            top: '',\n            zIndex: '',\n            width: ''\n          });\n        },\n        ghosting: true\n      });\n    });\n  }\n});\n// End XWiki augmentation.\nreturn XWiki;\n}(XWiki || {}));\n\n(function() {\n  function init() {\n    var form = $('inline');\n    if (!form) {\n      return false;\n    }\n    // Let the sheet handle the form submit.\n    // NOTE: The code that handles Save&Continue uses this URL to make the AJAX request and Firefox 3.6 doesn't resolve\n    // the empty string to the current page URL so we have to explicitly specify it.\n    form.action = window.location.href;\n\n    // Apply the vertical form layout standard.\n    form.addClassName('xform');\n\n    // Remove the preview button.\n    form.down(\"input[name='action_preview']\").up().remove();\n\n    // Rename the save buttons.\n    form.down(\"input[name='action_save']\").name = 'xaction_save';\n    form.down(\"input[name='action_saveandcontinue']\").name = 'xaction_saveandcontinue';\n\n    // Make sure the 'Save & Continue' button is submitted when clicked.\n    document.observe('xwiki:class:save', function(event) {\n      event = event.memo.originalEvent;\n      if (event.memo['continue']) {\n        var submitButton = event.memo.originalEvent.element();\n        submitButton.insert({after: new Element('input', {type: 'hidden', 'name': submitButton.name})});\n        (function () {\n          submitButton.next().remove();\n        }).defer();\n      }\n    }.bindAsEventListener(window));\n\n    // Be prepared to enhance some of the field properties.\n    new XWiki.FormFieldNameManager();\n    new XWiki.FormFieldPrettyNameManager();\n    new XWiki.FormFieldHintManager();\n    new XWiki.FormFieldDefaultValueManager();\n    new XWiki.FormFieldRequiredManager();\n\n    // Make the palette and the canvas live.\n    new XWiki.FormFieldPalette('palette');\n    new XWiki.FormCanvas('canvas');\n\n    return true;\n  }\n  (XWiki.domIsLoaded && init()) || document.observe('xwiki:dom:loaded', init);\n}).call();");
    obj.setName("Framework");
    obj.setParse("1");
    obj.setUse("onDemand");
});
