XWikiObj(function (obj) {
    obj.setCache("forbid");
    obj.setCode("var XWiki = (function(XWiki) {\n  /******************************************************\n   * THIS PART IS FOR THE SAVE SESSION BUTTON\n   ******************************************************/\n  \n  var showErrorMessage = function(element, message) {\n    if(!element.classList.contains('xErrorField')) {\n      element.addClassName('xErrorField');\n      element.insert({'after' : '<div class=\"xErrorMsg\">' + message + '</div>'});\n    }\n  };\n  \n  var removeErrorMessage = function(element) {    \n    if(element.classList.contains('xErrorField')) {      \n      element.removeClassName('xErrorField');\n      var errorMessage = element.next('.xErrorMsg');\n      errorMessage && errorMessage.remove();\n    }\n  };\n  \n  var DialogFromPage = Class.create(XWiki.widgets.ModalPopup, {\n    initialize : function($super, title, url) {\n      /* The div that will be used as the dialog content. It contains a loader icon at the beginning. */\n      this.contentDiv = new Element('div').update('<img src=\\\"$xwiki.getSkinFile(\"icons/xwiki/ajax-loader-large.gif\")\\\"/>');\n      this.contentUrl = url;\n      \n      $super(this.contentDiv, {}, \n             {title: title, \n              position: 'middle', \n              removeOnClose: true\n             });\n    },\n    \n    createDialog : function($super, event) {\n      $super(event);\n      \n      /* Save the dialog instance in a variable so that's available in Ajax.Updater closure */\n      var dialog = this;\n      \n      /* Asynchronously load the create scope page content and show it in the dialog when ready. */\n      new Ajax.Updater(this.contentDiv, this.contentUrl, {\n        onComplete : function() {\n          var sessionNameInput = $('saveSessionPopup:sessionNameInput');\n          \n          $('saveSessionPopup:cancel').observe('click', function(e) {\n            e.stop();\n            dialog.closeDialog();\n          });\n          \n          sessionNameInput.observe('keyup', function(e) {            \n            removeErrorMessage(sessionNameInput);\n          });\n          \n          \n          $('saveSessionPopup:form').observe('submit', function(e) {\n            e.stop();\n            \n            \n            if(sessionNameInput.value.strip().length == 0) {\n              showErrorMessage(sessionNameInput, '$services.localization.render(\"riscossPlatform.createForm.valueRequired\")');\n\n              return;\n            }\n            \n            var targetRestURL = XWiki.Document.RestURLTemplate.replace(\"__wiki__\", XWiki.Document.currentWiki).replace(\"__space__\", \"RISCOSSPlatformRiskAnalysisSessions\").replace(\"__page__\", sessionNameInput.value.strip());\n\n            new Ajax.Request(targetRestURL, {\n              method: 'GET',\n              onComplete: function(response) {\n                if(404 == response.status) {\n                  $('sessionName').setValue(sessionNameInput.getValue());\n                  $('saveSessionForm').submit();\n                }\n                else {\n                  showErrorMessage(sessionNameInput, '$services.localization.render(\"riscossPlatform.createForm.alreadyExistingItem\")');\n                }\n              },\n              onError: function(response) {\n                showErrorMessage(sessionNameInput, '$services.localization.render(\"riscossPlatform.createForm.networkError\")');\n              }\n            });\n          });\n        }});\n    }\n  });\n  \n  var SessionNamePopup = Class.create(XWiki.widgets.ModalPopup, {\n    initialize : function($super) {\n      this.sessionNameInput = new Element('input', {type: 'input'});\n      this.createButton = new Element('input', {type: 'image', src: '$xwiki.getSkinFile(\"icons/silk/add.png\")'});\n      \n      var container = new Element('div', {id: 'sessionNamePopup'});\n      container.insert(this.sessionNameInput);\n      container.insert(this.createButton);\n      \n      $super(container, {}, {\n        title: 'Foo', position: 'middle'});\n    }\n  });\n  \n  /******************************************************\n   * THIS PART IS FOR DISPLAYING RESULTS\n   ******************************************************/\n  \n  var createTextElement = function(value) {\n    var element = new Element('div');\n    element.innerHTML = JSON.stringify(value);\n    \n    return element;\n  }\n  \n  var createEvidenceElement = function(evidence) {\n    var div = new Element('div');\n    \n    var gauge = new Element('img', {\n      src: '$xwiki.getDocument('RISCOSSPlatformCode.EvidenceGauge').getExternalURL()?positive=' + evidence.positive + '&negative=' + evidence.negative});\n    \n    var textDiv = new Element('div');\n    textDiv.setStyle({float: 'right'});\n    textDiv.innerHTML = '<ul><li>Positive: ' + evidence.positive + '</li><li>Negative: ' + evidence.negative + '</li></ul>';\n    \n    div.insert({top: gauge});\n    div.insert({bottom: textDiv});\n    \n    return div;\n  }\n  \n  var createDistributionElement = function(distribution) {\n    var canvas = new Element('canvas', {width: 200, height: 15 * distribution.values.length});\n    var colors = [\"#298a08\", \"#86b404\", \"#ffbf00\", \"#fa5858\", \"#ff0000\"];\n    var context = canvas.getContext(\"2d\")\n    var width = canvas.width;\n    var height = canvas.height;\n\n    context.beginPath();\n    context.rect(0, 0, canvas.width, canvas.height);\n    context.stroke();\n    \n    var barHeight = Math.floor(canvas.height / distribution.values.length);\n    var fontSize = Math.min(barHeight, 10) ;\n    context.font = \"bold \" + fontSize + \"px sans-serif\"\n    var maxTextWidth = context.measureText('999.99%').width;\n        \n    for(i = 0; i < distribution.values.length; i++) {\n      context.beginPath();\n      context.rect(0, i * barHeight, Math.floor(canvas.width  * distribution.values[i]), barHeight);\n      context.fillStyle = colors[i];      \n      context.fill();\n      context.fillStyle = '#303030';\n      context.textBaseline = \"top\";\n      \n      context.fillText('' + Math.floor(10000 * distribution.values[i]) / 100 + \"%\", Math.min((canvas.width * distribution.values[i]) + 5, canvas.width - maxTextWidth - 5), (barHeight * i) + (barHeight - fontSize) / 2);\n    }\n    \n    return canvas;\n  }\n    \n  /* We expect data to be a map from a category to a map of results, where each\n   * result is a map of an id to a map with 3 elements (DESCRIPTION, TYPE, VALUE)\n   */\n  var displayData = function(element, data) {\n    var html = '<table>\\n'\n    for(category in data) {\n      html = html + '<tr><th colspan=\"2\">' + category + '</th></tr>\\n';\n      \n      for(item in data[category]) {\n        var description = data[category][item].DESCRIPTION || item;\n        var type = data[category][item].TYPE;\n        var value = data[category][item].VALUE;\n        html = html + '<tr><td>' + description + '</td><td><div class=\"result\" type=\"' + type + '\" style=\"display: none\">' + encodeURIComponent(JSON.stringify(value)) + '</div></td></tr>';\n      }\n    }\n    html = html + '</table>\\n'\n    \n    element.update(html);\n    element.setStyle({display: ''});\n    \n    var resultElements = $$('.result');\n    for(var i = 0; i < resultElements.length; i++) {\n      var resultElement = resultElements[i];\n      var type = resultElement.getAttribute(\"type\");\n      var value = JSON.parse(decodeURIComponent(resultElement.innerHTML));\n      if(type == \"EVIDENCE\") {\n        Element.replace(resultElement, createEvidenceElement(value));\n      }\n      else if(type = \"DISTRIBUTION\") {\n        Element.replace(resultElement, createDistributionElement(value));\n      }\n      else {\n        Element.replace(resultElement, createTextElement(value));\n      }\n    }\n  }\n  \n  function init() {\n    var inputDataElement = $('inputData');        \n    var resultDataElement = $('resultData');        \n    var inputData = JSON.parse(decodeURIComponent(inputDataElement.innerHTML).replace(/\\+/g, ' '));\n    var resultData = JSON.parse(decodeURIComponent(resultDataElement.innerHTML).replace(/\\+/g, ' '));\n    displayData(resultDataElement, resultData);\n    $('inputDataInput').setValue(JSON.stringify(inputData));\n    $('resultDataInput').setValue(JSON.stringify(resultData));\n    \n    $('saveSessionForm').observe('submit', function(e) {\n      var saveSessionDialog = new DialogFromPage('Save session', '$xwiki.getDocument(\"RISCOSSPlatformRiskAnalysisManagerCode.SaveSessionPopupForm\").getURL(\"view\", \"xpage=plain\")');\n      saveSessionDialog.showDialog();\n      e.stop();\n    })\n  }\n  \n  //Wait for dom load\n  (XWiki.domIsLoaded && init()) || document.observe('xwiki:dom:loaded', init);\n\n  //End XWiki augmentation\n  return XWiki;\n} (XWiki || {}))");
    obj.setName("");
    obj.setParse("1");
    obj.setUse("onDemand");
});
