XWikiObj(function (obj) {
    obj.setCache("forbid");
    obj.setCode("var XWiki = (function(XWiki) {\n  var createTextElement = function(value) {\n    var element = new Element('div');\n    element.innerHTML = JSON.stringify(value);\n    \n    return element;\n  }\n  \n  var createEvidenceElement = function(evidence) {\n    var div = new Element('div');\n    \n    var gauge = new Element('img', {\n      src: '$xwiki.getDocument('RISCOSSPlatformCode.EvidenceGauge').getExternalURL()?positive=' + evidence.positive + '&negative=' + evidence.negative});\n    \n    var textDiv = new Element('div');\n    textDiv.setStyle({float: 'right'});\n    textDiv.innerHTML = '<ul><li>Positive: ' + evidence.positive + '</li><li>Negative: ' + evidence.negative + '</li></ul>';\n    \n    div.insert({top: gauge});\n    div.insert({bottom: textDiv});\n    \n    return div;\n  }\n  \n  var createDistributionElement = function(distribution) {\n    var canvas = new Element('canvas', {width: 200, height: 15 * distribution.length});\n    var colors = [\"#298a08\", \"#86b404\", \"#ffbf00\", \"#fa5858\", \"#ff0000\"];\n    var context = canvas.getContext(\"2d\")\n    var width = canvas.width;\n    var height = canvas.height;\n\n    context.beginPath();\n    context.rect(0, 0, canvas.width, canvas.height);\n    context.stroke();\n    \n    var barHeight = Math.floor(canvas.height / distribution.values.length);\n    var fontSize = Math.min(barHeight, 10) ;\n    context.font = \"bold \" + fontSize + \"px sans-serif\"\n    var maxTextWidth = context.measureText('999.99%').width;\n        \n    for(i = 0; i < distribution.values.length; i++) {\n      context.beginPath();\n      context.rect(0, i * barHeight, Math.floor(canvas.width  * distribution.values[i]), barHeight);\n      context.fillStyle = colors[i];      \n      context.fill();\n      context.fillStyle = '#303030';\n      context.textBaseline = \"top\";\n      \n      context.fillText('' + Math.floor(10000 * distribution.values[i]) / 100 + \"%\", Math.min((canvas.width * distribution[i]) + 5, canvas.width - maxTextWidth - 5), (barHeight * i) + (barHeight - fontSize) / 2);\n    }\n    \n    return canvas;\n  }\n    \n  /* We expect data to be a map from a category to a map of results, where each\n   * result is a map of an id to a map with 3 elements (DESCRIPTION, TYPE, VALUE)\n   */\n  var displayData = function(element, data) {\n    var html = '<table>\\n'\n    for(category in data) {\n      html = html + '<tr><th colspan=\"2\">' + category + '</th></tr>\\n';\n      \n      for(item in data[category]) {\n        var description = data[category][item].DESCRIPTION || item;\n        var type = data[category][item].TYPE;\n        var value = data[category][item].VALUE;\n        html = html + '<tr><td>' + description + '</td><td><div class=\"result\" type=\"' + type + '\" style=\"display: none\">' + encodeURIComponent(JSON.stringify(value)) + '</div></td></tr>';\n      }\n    }\n    html = html + '</table>\\n'\n    \n    element.update(html);\n    element.setStyle({display: ''});\n    \n    var resultElements = $$('.result');\n    for(var i = 0; i < resultElements.length; i++) {\n      var resultElement = resultElements[i];\n      var type = resultElement.getAttribute(\"type\");\n      var value = JSON.parse(decodeURIComponent(resultElement.innerHTML));\n      if(type == \"EVIDENCE\") {\n        Element.replace(resultElement, createEvidenceElement(value));\n      }\n      else if(type = \"DISTRIBUTION\") {\n        Element.replace(resultElement, createDistributionElement(value));\n      }\n      else {\n        Element.replace(resultElement, createTextElement(value));\n      }\n    }\n  }\n  \n  var displayInputData = function(element, data) {\n    var html = '<table width=\"100%\"><tr><th colspan=\"2\">Provided inputs for this result</th></tr>';\n    \n    for(key in data) {\n      if(data[key].question) {\n        html = html + '<tr><td>' + data[key].question + '</td>';\n      }\n      else {\n        html = html + '<tr><td>Value for \\'' + key + '\\'</td>';\n      }\n      if(data[key].value.values) {\n        html = html + '<td>[';\n        for(var i = 0; i < data[key].value.values.length; i++) {\n          html = html + data[key].value.values[i].toFixed(2);\n          if(i < data[key].value.values.length - 1) {\n            html = html + ', ';\n          }\n        }\n        html = html + ']</td></tr>';\n      }\n      else {\n        html = html + '<td>' + data[key].value + '</td></tr>';\n      }\n    }\n    html = html + '</table>';\n    \n    element.update(html);\n    element.setStyle({display: ''});\n  }\n\n  function init() {\n    var resultElements = $$('div.resultData');\n    for(i = 0; i < resultElements.length; i++) {\n      var resultElement = resultElements[i];\n      var data = JSON.parse(resultElement.innerHTML);\n      displayData(resultElement, data);\n    }\n    \n    var inputDataElements = $$('div.resultInput');\n    \n    console.log(inputDataElements);\n    for(i = 0; i < inputDataElements.length; i++) {\n      var inputDataElement = inputDataElements[i];\n      var data = JSON.parse(inputDataElement.innerHTML);\n      displayInputData(inputDataElement, data);\n    }\n  }\n  \n  //Wait for dom load\n  (XWiki.domIsLoaded && init()) || document.observe('xwiki:dom:loaded', init);\n\n  //End XWiki augmentation\n  return XWiki;\n} (XWiki || {}))");
    obj.setName("");
    obj.setParse("1");
    obj.setUse("onDemand");
});
